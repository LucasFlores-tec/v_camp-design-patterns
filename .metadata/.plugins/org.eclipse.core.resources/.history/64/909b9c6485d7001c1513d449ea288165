package br.com.virtualoutletstore.client;

import br.com.virtualoutletstore.builder.catalog.Catalog;
import br.com.virtualoutletstore.builder.catalog.Product;
import br.com.virtualoutletstore.composite.cart.Cart;
import br.com.virtualoutletstore.facade.order.Order;
import br.com.virtualoutletstore.iterator.orderlist.OrderList;
import br.com.virtualoutletstore.iterator.orderlist.OrderListIterator;
import br.com.virtualoutletstore.observer.backoffice.Backoffice;
import br.com.virtualoutletstore.singleton.inventory.ProductInventory;

public class Client {
	
public static void main(String[] args) {
		
		/**
		 * Instantiating the objects needed.
		 */
		Catalog catalogOfProducts = new Catalog();
		Cart purchaseCart = new Cart();
		Cart purchaseCart1 = new Cart();
		Cart purchaseCart2 = new Cart();
		Cart purchaseCart3 = new Cart();
		OrderListIterator orderListIterator = new OrderListIterator();
		
		/**
		 * Adding products to the Catalog object using the method addProductToCatalog, from the class Catalog, and printing them.
		 */
		catalogOfProducts.addProductToCatalog("book");
		catalogOfProducts.addProductToCatalog("tshirt");
		catalogOfProducts.addProductToCatalog("ssdcard");
		catalogOfProducts.addProductToCatalog("mouse");
		System.out.println("PRINTING THE PRODUCTS OF CATALOG\n");
		System.out.println("Catalog: " + catalogOfProducts.getAllProducts());
		
		/**
		 * Adding products of the Catalog object to the Inventory of Products and printing them.
		 */
		System.out.println("\nADDING PRODUCTS TO THE INVENTORY...");
		ProductInventory.addCatalogToInventory(catalogOfProducts);
		
		System.out.println("\nPRINTING THE PRODUCTS OF THE INVENTORY\n");
		for(Product product: ProductInventory.getInstanceOfInventory().getInventory()) {
			System.out.println("SKU: " + product.getSku());
			System.out.println("Price: " + product.getPrice());
			System.out.println("Weight: " + product.getWeight());
			switch(product.getSku()) {
			case 1: 
				System.out.println("Author: " + product.getBook().getAuthor());
				System.out.println("Title: " + product.getBook().getTitle());
				ProductInventory.getInstanceOfInventory().getProductStock(1);
				System.out.println("\n=====================================\n"); 
				break;
			case 2: 
				System.out.println("Color: " + product.getTshirt().getColor());
				System.out.println("Size: " + product.getTshirt().getSize());
				ProductInventory.getInstanceOfInventory().getProductStock(2);
				System.out.println("\n=====================================\n");
				break;
			case 3:
				System.out.println("Brand: " + product.getSsdcard().getBrand());
				System.out.println("Gigabytes: " + product.getSsdcard().getGigabytes());
				ProductInventory.getInstanceOfInventory().getProductStock(3);
				System.out.println("\n=====================================\n");
				break;
			case 4:
				System.out.println("Brand: " + product.getMouse().getBrand());
				System.out.println("Type: " + product.getMouse().getType());
				ProductInventory.getInstanceOfInventory().getProductStock(4);
				System.out.println("\n=====================================\n");
				break;
			}
		}
		
		/**
		 * Adding products from the Inventory to the Cart Object created and printing them.
		 */
		System.out.println("\nADDING PRODUCTS TO CARTS\n");
		System.out.println("CART 1");
		purchaseCart.addProductToCart(1, 3);
		purchaseCart.addProductToCart(3, 1);
		purchaseCart.addProductToCart(4, 1);
		for(int i=0;i<purchaseCart.getCart().size();i++) {
			System.out.println("Product (" + (i + 1) + "): " + purchaseCart.getCart().get(i)); 
		}
		
		System.out.println("\nADDING PRODUCTS TO CART 2");
		purchaseCart1.addProductToCart(1, 1);
		purchaseCart1.addProductToCart(2, 3);
		purchaseCart1.addProductToCart(4, 1);
		for(int i=0;i<purchaseCart1.getCart().size();i++) {
			System.out.println("Product (" + (i + 1) + "): " + purchaseCart1.getCart().get(i)); 
		}
		
		System.out.println("\nADDING PRODUCTS TO CART 3");
		purchaseCart2.addProductToCart(1, 1);
		purchaseCart2.addProductToCart(2, 1);
		purchaseCart2.addProductToCart(3, 3);
		for(int i=0;i<purchaseCart2.getCart().size();i++) {
			System.out.println("Product (" + (i + 1) + "): " + purchaseCart2.getCart().get(i)); 
		}
		
		System.out.println("\nADDING PRODUCTS TO CART 4");
		purchaseCart3.addProductToCart(1, 1);
		purchaseCart3.addProductToCart(3, 1);
		purchaseCart3.addProductToCart(4, 3);
		for(int i=0;i<purchaseCart3.getCart().size();i++) {
			System.out.println("Product (" + (i + 1) + "): " + purchaseCart3.getCart().get(i)); 
		}
		
		System.out.println("\n=====================================\n");
		
		System.out.println("\nPRINTING THE PRODUCTS OF THE INVENTORY\n");
		for(Product product: ProductInventory.getInstanceOfInventory().getInventory()) {
			System.out.println("SKU: " + product.getSku());
			System.out.println("Price: " + product.getPrice());
			System.out.println("Weight: " + product.getWeight());
			switch(product.getSku()) {
			case 1: 
				System.out.println("Author: " + product.getBook().getAuthor());
				System.out.println("Title: " + product.getBook().getTitle());
				ProductInventory.getInstanceOfInventory().getProductStock(1);
				System.out.println("\n=====================================\n"); 
				break;
			case 2: 
				System.out.println("Color: " + product.getTshirt().getColor());
				System.out.println("Size: " + product.getTshirt().getSize());
				ProductInventory.getInstanceOfInventory().getProductStock(2);
				System.out.println("\n=====================================\n");
				break;
			case 3:
				System.out.println("Brand: " + product.getSsdcard().getBrand());
				System.out.println("Gigabytes: " + product.getSsdcard().getGigabytes());
				ProductInventory.getInstanceOfInventory().getProductStock(3);
				System.out.println("\n=====================================\n");
				break;
			case 4:
				System.out.println("Brand: " + product.getMouse().getBrand());
				System.out.println("Type: " + product.getMouse().getType());
				ProductInventory.getInstanceOfInventory().getProductStock(4);
				System.out.println("\n=====================================\n");
				break;
			}
		}
		
		System.out.println("\nREMOVING PRODUCTS FROM CARTS\n");
		System.out.println("CART 1");
		purchaseCart.removeProductFromCart(1, 1);
		purchaseCart.removeProductFromCart(3, 1);
		for(int i=0;i<purchaseCart.getCart().size();i++) {
			System.out.println("Product (" + (i + 1) + "): " + purchaseCart.getCart().get(i)); 
		}
		
		System.out.println("\nREMOVING PRODUCTS TO CART 2");
		purchaseCart1.removeProductFromCart(2, 1);
		purchaseCart1.removeProductFromCart(4, 1);
		for(int i=0;i<purchaseCart1.getCart().size();i++) {
			System.out.println("Product (" + (i + 1) + "): " + purchaseCart1.getCart().get(i)); 
		}
		
		System.out.println("\nREMOVING PRODUCTS TO CART 3");
		purchaseCart2.removeProductFromCart(2, 1);
		purchaseCart2.removeProductFromCart(3, 1);
		for(int i=0;i<purchaseCart2.getCart().size();i++) {
			System.out.println("Product (" + (i + 1) + "): " + purchaseCart2.getCart().get(i)); 
		}
		
		System.out.println("\nREMOVING PRODUCTS TO CART 4");
		purchaseCart3.removeProductFromCart(1, 1);
		purchaseCart3.removeProductFromCart(4, 1);
		for(int i=0;i<purchaseCart3.getCart().size();i++) {
			System.out.println("Product (" + (i + 1) + "): " + purchaseCart3.getCart().get(i)); 
		}
		
		System.out.println("\n=====================================\n");
		
		System.out.println("\nPRINTING THE PRODUCTS OF THE INVENTORY\n");
		for(Product product: ProductInventory.getInstanceOfInventory().getInventory()) {
			System.out.println("SKU: " + product.getSku());
			System.out.println("Price: " + product.getPrice());
			System.out.println("Weight: " + product.getWeight());
			switch(product.getSku()) {
			case 1: 
				System.out.println("Author: " + product.getBook().getAuthor());
				System.out.println("Title: " + product.getBook().getTitle());
				ProductInventory.getInstanceOfInventory().getProductStock(1);
				System.out.println("\n=====================================\n"); 
				break;
			case 2: 
				System.out.println("Color: " + product.getTshirt().getColor());
				System.out.println("Size: " + product.getTshirt().getSize());
				ProductInventory.getInstanceOfInventory().getProductStock(2);
				System.out.println("\n=====================================\n");
				break;
			case 3:
				System.out.println("Brand: " + product.getSsdcard().getBrand());
				System.out.println("Gigabytes: " + product.getSsdcard().getGigabytes());
				ProductInventory.getInstanceOfInventory().getProductStock(3);
				System.out.println("\n=====================================\n");
				break;
			case 4:
				System.out.println("Brand: " + product.getMouse().getBrand());
				System.out.println("Type: " + product.getMouse().getType());
				ProductInventory.getInstanceOfInventory().getProductStock(4);
				System.out.println("\n=====================================\n");
				break;
			}
		}
		
		/**
		 * Printing the Cart objects information: 1) Products, 2) Shipping type and price, 3) The total price of the cart and 4) The total weight of the cart.
		 */
		System.out.println("PRINTING THE CARTS:\n");
		System.out.println("CART 1");
		System.out.println("Products: " + purchaseCart.getCart());
		System.out.println(purchaseCart.getShipping(purchaseCart));
		System.out.println("Total Price: " + purchaseCart.getTotalPriceOfTheCart());
		System.out.println("Total Weight: " + purchaseCart.getTotalWeightOfTheCart());
		
		System.out.println("\n=====================================\n");
		
		System.out.println("CART 2");
		System.out.println("Products: " + purchaseCart1.getCart());
		System.out.println(purchaseCart1.getShipping(purchaseCart1));
		System.out.println("Total Price: " + purchaseCart1.getTotalPriceOfTheCart());
		System.out.println("Total Weight: " + purchaseCart1.getTotalWeightOfTheCart());
		
		System.out.println("\n=====================================\n");
		
		System.out.println("CART 3");
		System.out.println("Products: " + purchaseCart2.getCart());
		System.out.println(purchaseCart2.getShipping(purchaseCart2));
		System.out.println("Total Price: " + purchaseCart2.getTotalPriceOfTheCart());
		System.out.println("Total Weight: " + purchaseCart2.getTotalWeightOfTheCart());
		
		System.out.println("\n=====================================\n");
		
		System.out.println("CART 4");
		System.out.println("Products: " + purchaseCart3.getCart());
		System.out.println(purchaseCart3.getShipping(purchaseCart3));
		System.out.println("Total Price: " + purchaseCart3.getTotalPriceOfTheCart());
		System.out.println("Total Weight: " + purchaseCart3.getTotalWeightOfTheCart());
		
		System.out.println("\n=====================================\n");
		
		/**
		 * Adding the Cart objects with their products and characteristics of shipping, price and weight to an order each, and printing them..
		 */
		System.out.println("ADDING CARTS TO THEIR ORDERS...\n");
		Order order1 = new Order(purchaseCart, purchaseCart.getShipping(purchaseCart), "pending");
		Order order2 = new Order(purchaseCart1, purchaseCart1.getShipping(purchaseCart1), "pending");
		Order order3 = new Order(purchaseCart2, purchaseCart2.getShipping(purchaseCart2), "pending");
		Order order4 = new Order(purchaseCart3, purchaseCart3.getShipping(purchaseCart3), "pending");
		
		System.out.println("=====================================\n");
		
		System.out.println("PRINTING THE ORDERS\n");
		System.out.println("Order 1: " + order1);
		System.out.println("Order 2: " + order2);
		System.out.println("Order 3: " + order3);
		System.out.println("Order 4: " + order4);
		
		System.out.println("\n=====================================\n");
		
		order1.setOrderStatus("cancelled");
		order2.setOrderStatus("cancelled");
		
		System.out.println("\n=====================================\n");
		
		System.out.println("ADDING ORDERS TO THE ORDERLIST... AND ACTIVATING THE OBSERVER BACKOFFICE");
		
		System.out.println("\n=====================================\n");

		/**
		 * Instantiating the observer Backoffice to return a notification every time an order is added to the order list.
		 */
		Backoffice observer = new Backoffice();
		OrderList.getInstanceOfOrderList().attachObserver(observer);
		
		OrderList.getInstanceOfOrderList().addOrderToTheListOfOrders(order1);
		OrderList.getInstanceOfOrderList().addOrderToTheListOfOrders(order2);
		
		/**
		 * Using Observer to get a print of the order that has been added to the order list, every time an order is added.
		 */
		System.out.println("PRINTING FIRST HALF ORDERLIST FROM THE BACKOFFICE\n");
		observer.getOrderList();
		
		OrderList.getInstanceOfOrderList().addOrderToTheListOfOrders(order3);
		OrderList.getInstanceOfOrderList().addOrderToTheListOfOrders(order4);
		
		System.out.println("\nPRINTING THE WHOLE ORDERLIST FROM THE BACKOFFICE\n");
		observer.getOrderList();
		
		/**
		 * Adding Iterator object to the OrderList, in order to get different types of iterating in the OrderList instance.
		 */
		OrderList.getInstanceOfOrderList().setIterator(orderListIterator);
		
		System.out.println("PRINTING THE ORDERS CART, STATUS AND SHIPPING TYPE/PRICE\n");
		orderListIterator.getOrderList();
		
		System.out.println("\nPRINTING THE ORDERS SHIPPING TYPE/PRICE\n");
		orderListIterator.getOrderShipping();
		
		System.out.println("\nPRINTING THE PRODUCTS OF THE ORDERS/CARTS\n");
		orderListIterator.getProductsOfTheOrder();
		
		System.out.println("\nPRINTING THE TOTAL PRICE OF THE ORDERS/CARTS\n");
		orderListIterator.getOrderTotalPrice();
		
	}

}
